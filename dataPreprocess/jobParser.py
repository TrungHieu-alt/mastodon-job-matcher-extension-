# jdParser.py
import re
import google.generativeai as gemini
from dotenv import load_dotenv
import os
import json

# --- C·∫•u h√¨nh ---
load_dotenv()
api_key = os.getenv("GEMINI_API_KEY")
gemini.configure(api_key=api_key)

def parse_job_description(jd_text: str) -> dict:
    """
    Chu·∫©n h√≥a (normalize) v√† tr√≠ch xu·∫•t th√¥ng tin quan tr·ªçng t·ª´ JD b·∫±ng Gemini.
    Tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng JSON chu·∫©n g·ªìm c√°c tr∆∞·ªùng ch√≠nh.
    """
    prompt = f"""
    You are a precise JD parser. Read the following Job Description and extract key info.
    Return VALID JSON ONLY with these fields:
    {{
      "title": "Job title",
      "summary": "Short 2-3 sentence summary of the role",
      "requirements": ["list of skill or tech requirements"],
      "experience_level": "Junior/Mid/Senior/Lead/Manager",
      "years_of_experience": "Number of years if available",
      "tech_stack": ["list of mentioned technologies"],
      "nice_to_have": ["optional but beneficial skills"]
    }}

    Respond with JSON only, no explanation or extra text.

    --- JD ---
    {jd_text}
    """
    response = gemini.GenerativeModel("gemini-2.5-flash").generate_content(prompt)
    text = response.text.strip()

    # T√¨m v√† tr√≠ch JSON trong ph·∫ßn text tr·∫£ v·ªÅ
    json_pattern = re.search(r"\{[\s\S]*\}", text)
    if json_pattern:
        json_str = json_pattern.group(0)
        try:
            return json.loads(json_str)
        except json.JSONDecodeError as e:
            print(f"‚ö†Ô∏è Parse l·ªói JSON ({e}), tr·∫£ v·ªÅ text th√¥.")
            return {"raw_text": jd_text.strip()}
    else:
        print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y JSON trong ph·∫£n h·ªìi, tr·∫£ v·ªÅ text th√¥.")
        return {"raw_text": jd_text.strip()}


# --- Test tr·ª±c ti·∫øp  ---
if __name__ == "__main__":
  print("helo")
  sample_jd = """
We are hiring a Backend Developer.

Responsibilities:
- Build and maintain scalable APIs using Node.js and Express.
- Work with databases like MySQL or MongoDB.
- Collaborate with frontend and DevOps teams.

Requirements:
- 2+ years of experience in backend development.
- Strong knowledge of JavaScript, RESTful APIs, and SQL.
- Familiar with Docker, AWS, or CI/CD tools is a plus.
"""

  result = parse_job_description(sample_jd)
  print("\n===== üß† PARSED JD JSON =====")
  print(json.dumps(result, indent=2, ensure_ascii=False))
