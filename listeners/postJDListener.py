from mastodon import StreamListener
import re, time
from logics.matchingLogic import find_best_candidates

class RecruitmentListener(StreamListener):
    def __init__(self, mastodon, listen_hashtag):
        super().__init__()
        self.mastodon = mastodon
        self.LISTEN_HASHTAG = listen_hashtag

    def on_update(self, status):
        try:
            my_username = self.mastodon.me()['username']
            if status['account']['username'] == my_username:
                return
        except Exception as e:
            print(f"[ERR] Kh√¥ng th·ªÉ x√°c th·ª±c bot: {e}")
            return

        hashtags = [tag['name'].lower() for tag in status['tags']]
        if self.LISTEN_HASHTAG.lower() not in hashtags:
            return

        print(f"üî• B√†i ƒëƒÉng m·ªõi t·ª´ @{status['account']['acct']}")
        jd_text = re.sub(r'<.*?>', '', status['content']).strip()
        jd_text = jd_text.replace(f"#{self.LISTEN_HASHTAG}", "").strip()

        poster_account = status['account']

        self.mastodon.status_post(
            f"@{poster_account['acct']} ƒê√£ nh·∫≠n y√™u c·∫ßu tuy·ªÉn d·ª•ng. Vui l√≤ng ch·ªù k·∫øt qu·∫£ trong DM!",
            in_reply_to_id=status['id']
        )

        try:
            print(f"   > ƒêang x·ª≠ l√Ω JD: {jd_text[:80]}...")
            final_ranking = find_best_candidates(jd_text)

            if not final_ranking:
                self.mastodon.status_post(
                    f"@{poster_account['acct']} Kh√¥ng t√¨m th·∫•y ·ª©ng vi√™n ph√π h·ª£p.",
                    visibility='direct'
                )
                return

            self.mastodon.status_post(
                f"@{poster_account['acct']} ‚úÖ D∆∞·ªõi ƒë√¢y l√† b·∫£ng x·∫øp h·∫°ng ·ª©ng vi√™n:",
                visibility='direct'
            )
            time.sleep(1)

            for i, result in enumerate(final_ranking):
                eval_data = result.get('detailed_evaluation', {})
                msg = (
                    f"üèÜ H·∫†NG {i+1}: {result.get('name', 'N/A')}\n"
                    f"ƒêi·ªÉm: {eval_data.get('score', 'N/A')}/100\n"
                    f"Kinh nghi·ªám: {eval_data.get('experience_match', 'N/A')}\n\n"
                    f"L√Ω do: {eval_data.get('rationale', 'N/A')}"
                )
                print(msg)
                self.mastodon.status_post(f"@{poster_account['acct']} {msg}", visibility='direct')
                print(f"   > G·ª≠i xong H·∫°ng {i+1}")
                time.sleep(1)
            
            print(f"‚úÖ Ho√†n t·∫•t g·ª≠i DM cho @{poster_account['acct']}")

        except Exception as e:
            print(f"‚ùå L·ªói x·ª≠ l√Ω JD: {e}")
            self.mastodon.status_post(
                f"@{poster_account['acct']} ‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i sau.",
                visibility='direct'
            )
