from mastodon import StreamListener
from logic.resume_parser import parse_resume
from db.save_db import save_resume_to_chroma
import requests, os, uuid


class CVListener(StreamListener):
    def on_update(self, status):
        # 1Ô∏è‚É£ L·ªçc b√†i c√≥ hashtag #cv
        hashtags = [t["name"].lower() for t in status["tags"]]
        if "cv" not in hashtags:
            return

        owner = status["account"]["acct"]
        post_url = status["url"]
        created_at = status["created_at"]
        attachments = status["media_attachments"]

        # Kh√¥ng c√≥ file ƒë√≠nh k√®m th√¨ b·ªè qua
        if not attachments:
            print(f"‚ö†Ô∏è @{owner} ƒëƒÉng #cv nh∆∞ng kh√¥ng c√≥ file ƒë√≠nh k√®m.")
            return

        print(f"üì• B·∫Øt ƒë∆∞·ª£c b√†i #cv t·ª´ @{owner}")

        # 2Ô∏è‚É£ L·∫•y file ƒë·∫ßu ti√™n v√† t·∫£i v√†o temp folder - up cv ch·ªâ ƒë∆∞·ª£c 1 file 
        attachment = attachments[0]
        url = attachment["url"]
        ext = os.path.splitext(url)[1]
        tmp_path = f"/tmp/{owner}_{uuid.uuid4().hex[:6]}{ext}"

        r = requests.get(url)
        with open(tmp_path, "wb") as f:
            f.write(r.content)

        # 3Ô∏è‚É£ Parse CV -> th√™m metadata -> l∆∞u DB
        cv_data = parse_resume(tmp_path)
        cv_data["posted_at"] = created_at
        save_resume_to_chroma(cv_data, owner=owner, source_url=post_url)

        # 4Ô∏è‚É£ Xo√° file t·∫°m
        os.remove(tmp_path)
        print(f"‚úÖ Ho√†n t·∫•t l∆∞u CV cho @{owner}\n")
